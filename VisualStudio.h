//----------------------------------------------------------------------
// Copyright (c) 2021, Guy Carver
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution.
//
//     * The name of Guy Carver may not be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// FILE    VisualStudio.h
// DATE    08/24/2021 10:16 PM
//----------------------------------------------------------------------

#pragma once

#ifdef VISUALSTUDIO_EXPORTS
#define VISUALSTUDIO_API __declspec(dllexport)
#else
#define VISUALSTUDIO_API __declspec(dllimport)
#endif //VISUALSTUDIO_EXPORTS

/*
// These import directives cause the creation of a dte.tlh and MSO.tlh file in the intermediate directory
//  of the project when it is being built.  These files are essentially include files that define everything
//  necessary to interface with the corresponding automation objects.  These files are somewhat hard to 
//  read but very informative.
*/

//These files are generated by the below #import directives.  If either Microsoft office or DevStudio
// change then the imports will have to replace these include directives for one build iteration.
// The updated files should then be copied from the object directory into the source directory.
#include "MSO.tlh"
#include "dte80a.tlh"

// Office 10 library: Pre-requisite for Visual Studio .Net IDE automation object model
//#import "libid:2DF8D04C-5BFA-101B-BDE5-00AA0044DE52" version("2.2") lcid("0") raw_interfaces_only named_guids rename("RGB", "RGBX") rename("DocumentProperties", "DocumentPropertiesX")

// DTE library: Importing Visual Studio .Net IDE automation object model
//#import "libid:80CC9F66-E7D8-4DDD-85B6-D9E6CD0E93E2" version("7.1") lcid("0") raw_interfaces_only named_guids no_namespace rename("GetObject", "GetObjectX") rename("SearchPath", "SearchPathX") rename("FindText", "FindTextX") rename("ReplaceText", "ReplaceTextX")
//#import "dte.olb" raw_interfaces_only named_guids

//Smart pointers to some of the DevStudio interfaces.  These are duplicates of the ones defined in the DTE.tlh file.
//typedef CComPtr<_DTE> DTEPtr;					//Smart pointer to DTE.
//typedef CComPtr<_Solution> NETSolutionPtr;
//typedef CComPtr<SolutionBuild> NETSolutionBuildPtr;
//typedef CComPtr<Projects> NETProjectsPtr;
//typedef CComPtr<Project> NETProjectPtr;
//typedef CComPtr<ProjectItems> NETProjectItemsPtr;
//typedef CComPtr<ProjectItem> NETProjectItemPtr;

extern "C" {

VISUALSTUDIO_API bool Open( const wchar_t *apVersion );
VISUALSTUDIO_API void Close();
VISUALSTUDIO_API bool SetFile( const wchar_t *apFileName, uint32_t aiLineNumber );
VISUALSTUDIO_API void *GetBreakPoints( uint32_t &aCount );
VISUALSTUDIO_API const wchar_t *GetBreakPoint( void *apBreaks, uint32_t aIndex, uint32_t &aLine );
VISUALSTUDIO_API const wchar_t *GetEnabledBreakPoint( void *apBreaks, uint32_t aIndex, bool abEnabled, uint32_t &aLine );
VISUALSTUDIO_API bool SendCommand( const wchar_t *apCommand, const wchar_t *apArgs );
VISUALSTUDIO_API uint32_t AddOutputWindow( const char *apWindowName );
VISUALSTUDIO_API void OutputToPane( uint32_t aiIndex, const char *apString );

}


